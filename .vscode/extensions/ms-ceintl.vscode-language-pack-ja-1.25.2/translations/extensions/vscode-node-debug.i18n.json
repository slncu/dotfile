{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"extension.description": "Node.js のデバッグ サポート (バージョン 8.0 以前)",
			"node.label": "Node.js",
			"open.loaded.script": "読み込み済みのスクリプトを開く",
			"attach.node.process": "Node のプロセスにアタッチ",
			"toggle.skipping.this.file": "このファイルをスキップする",
			"toggle.auto.attach": "自動アタッチの切り替え",
			"loaded.scripts.view.name": "読み込み済みのスクリプト",
			"smartStep.description": "元のソースにマップし直すことができない、生成されたコードを自動的にステップ スルーします。",
			"skipFiles.description": "デバッグ時にスキップするファイルの glob パターンの配列。",
			"outFiles.description": "ソース マップを有効にすると、これらの glob パターンは生成した JavaScript ファイルを指定します。パターンが '!' で始まる場合は、ファイルは除外されます。指定しない場合は、生成されたコードはそのソースと同じディレクトリ内にあると想定されます。",
			"outDir.deprecationMessage": "属性 'outDir' は非推奨です。代わりに 'outFiles' を使用してください。",
			"trace.description": "診断出力を生成します。これを true に設定する代わりに、コンマで区切られた 1 つ以上のセレクターの一覧を作成することができます。'verbose' セレクターにより、非常に詳細な出力が生成されます。",
			"launch.args.description": "プログラムに渡されるコマンド ライン引数。",
			"node.protocol.description": "使用する Node.js デバッグ プロトコルです。",
			"node.protocol.auto.description": "最適なプロトコルを自動的に検出しようとします。Node 8.0 以上の起動には 'inspector' を選択します。",
			"node.protocol.inspector.description": "バージョン 6.3 以上の Node.js でサポートされる新しいプロトコルです",
			"node.protocol.legacy.description": "バージョン 8.0 より前の Node.js でサポートされる、以前のプロトコルです",
			"node.sourceMaps.description": "JavaScript ソース マップを使用します (存在する場合)。",
			"node.stopOnEntry.description": "起動後、プログラムを自動的に停止します。",
			"node.port.description": "添付先のデバッグ ポート。既定は 5858 です。",
			"node.address.description": "デバッグ対象のプロセスの TCP/IP アドレス (Node.js 5.0 以上の場合のみ)。既定値は 'localhost' です。",
			"node.timeout.description": "このミリ秒の間、Node.js への接続を再試行します。既定値は 10000 ミリ秒です。",
			"node.restart.description": "Node.js が終了した後、セッションを再開します。",
			"node.localRoot.description": "プログラムの入ったローカル ディレクトリへのパス。",
			"node.remoteRoot.description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
			"node.showAsyncStacks.description": "現在の呼び出し履歴の原因となった非同期呼び出しを表示します。'inspector' プロトコルのみ。",
			"node.sourceMapPathOverrides.description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
			"node.launch.program.description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
			"node.launch.externalConsole.deprecationMessage": "属性 'externalConsole' は非推奨です。代わりに 'console' を使用してください。",
			"node.launch.console.description": "デバッグ ターゲットの起動場所です。",
			"node.launch.console.internalConsole.description": "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
			"node.launch.console.integratedTerminal.description": "VS Code の統合ターミナルです",
			"node.launch.console.externalTerminal.description": "ユーザー設定を介して構成できる外部ターミナルです",
			"node.launch.cwd.description": "デバッグされるプログラムの作業ディレクトリへの絶対パス。",
			"node.launch.runtimeExecutable.description": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、'node' とみなされます。",
			"node.launch.runtimeArgs.description": "ランタイム実行可能ファイルに渡される省略可能な引数。",
			"node.launch.runtimeVersion.description": "使用する 'node' ランタイムのバージョン。'nvm' が必要です。",
			"node.launch.env.description": "プログラムに渡された環境変数。'null' 値は環境から変数を削除します。",
			"node.launch.envFile.description": "環境変数の定義を含むファイルへの絶対パス。",
			"node.launch.useWSL.description": "Windows Subsystem Linux を使用します。",
			"node.launch.outputCapture.description": "出力メッセージのキャプチャ場所: debug API, stdout/stderr ストリーム",
			"node.launch.autoAttachChildProcesses.description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
			"node.launch.config.name": "起動",
			"node.attach.processId.description": "アタッチ先のプロセスの ID。",
			"node.attach.config.name": "アタッチ",
			"node.processattach.config.name": "プロセスにアタッチ",
			"node.snippet.launch.label": "Node.js: プログラムの起動",
			"node.snippet.launch.description": "ノード プログラムをデバッグ モードで起動します",
			"node.snippet.npm.label": "Node.js: NPM による起動",
			"node.snippet.npm.description": "npm の 'debug' スクリプトによりノード プログラムを起動します",
			"node.snippet.attach.label": "Node.js: アタッチ",
			"node.snippet.attach.description": "実行中のノード プログラムにアタッチします",
			"node.snippet.remoteattach.label": "Node.js: リモート プログラムにアタッチする",
			"node.snippet.remoteattach.description": "リモート ノード プログラムのデバッグ ポートにアタッチします",
			"node.snippet.attachProcess.label": "Node.js: プロセスへのアタッチ",
			"node.snippet.attachProcess.description": "プロセス ピッカーを開いて、アタッチ先の node プロセスを選択します",
			"node.snippet.nodemon.label": "Node.js: nodemon のセットアップ",
			"node.snippet.nodemon.description": "nodemon を使用してソース変更時にデバッグ セッションを再起動します",
			"node.snippet.mocha.label": "Node.js: Mocha テスト",
			"node.snippet.mocha.description": "Mocha テストをデバッグします",
			"node.snippet.yo.label": "Node.js: Yeoman ジェネレーター",
			"node.snippet.yo.description": "yeoman ジェネレーターをデバッグします (プロジェクト フォルダーで 'npm link' を実行してインストールします)",
			"node.snippet.gulp.label": "Node.js: Gulp タスク",
			"node.snippet.gulp.description": "gulp タスクをデバッグします (プロジェクトにローカルの gulp がインストールされていることを確認します)",
			"node.snippet.electron.label": "Node.js: Electron (メイン)",
			"node.snippet.electron.description": "Electron のメイン プロセスをデバッグします"
		},
		"out/node/nodeDebug": {
			"setVariable.error": "設定値がサポートされていません",
			"exception.paused.promise.rejection": "Promise の失敗で一時停止",
			"exception.promise.rejection.text": "Promise の失敗 ({0})",
			"exception.promise.rejection": "Promise の失敗",
			"reason.description.step": "ステップで一時停止",
			"reason.description.breakpoint": "ブレークポイントで一時停止",
			"reason.description.exception": "例外で一時停止",
			"reason.description.user_request": "ユーザーの要求で一時停止",
			"reason.description.entry": "エントリで一時停止",
			"reason.description.debugger_statement": "デバッガー ステートメントで一時停止",
			"reason.description.restart": "フレーム エントリで一時停止",
			"exceptions.all": "すべての例外",
			"exceptions.uncaught": "キャッチされない例外",
			"exceptions.rejects": "Promise が失敗",
			"VSND2028": "不明なコンソールの種類 '{0}'.",
			"attribute.wls.not.exist": "Windows Subsystem Linux のインストールが見つかりません",
			"VSND2001": "PATH 上で '{0}' のランタイムが見つかりません。'{0}' がインストールされていることを確認してください。",
			"program.path.case.mismatch.warning": "プログラム パスで使用されている文字と、ディスク上のファイルの文字の間で大文字と小文字が異なっています。ブレークポイントがヒットしない可能性があります。",
			"VSND2002": "プログラム '{0}' を起動できません。ソース マップを構成すると役立つ場合があります。",
			"VSND2009": "対応する JavaScript が見つからないため、プログラム '{0}' を起動できません。",
			"VSND2003": "プログラム '{0}' を起動できません。'{1}' 属性を設定すると役立つ可能性があります。",
			"VSND2029": "ファイル ({0}) から環境変数を読み込むことができません。",
			"node.console.title": "Node デバッグ コンソール",
			"VSND2011": "端末 ({0}) でデバッグ ターゲットを起動できません。",
			"VSND2017": "デバッグ ターゲット ({0}) を起動できません。",
			"VSND2010": "ランタイム プロセスに接続できません (理由: {0})。",
			"VSND2033": "ランタイムに接続できません。ランタイムが 'レガシ' デバッグ モードであることを確認してください。",
			"VSND2034": "'legacy' プロトコルを介してランタイムに接続できません。'inspector' プロトコルを使用してください。",
			"file.on.disk.changed": "ディスク上のファイルが変更されているため検証されませんでした。デバッグ セッションを再開してください。",
			"VSND2019": "内部モジュール {0} が見つかりません。",
			"sourcemapping.fail.message": "生成されたコードが見つからないので、ブレークポイントが無視されました (ソース マップの問題?)。",
			"VSND2022": "プログラムが JavaScript の外部で一時停止したため、呼び出し履歴はありません。",
			"VSND2023": "利用できる呼び出し履歴はありません。",
			"VSND2018": "利用できる呼び出し履歴はありません ({_command}: {_error})。",
			"origin.from.node": "Node.js からの読み取り専用コンテンツ",
			"origin.from.remote.node": "リモート Node.js からの読み取り専用コンテンツ",
			"origin.core.module": "読み取り専用のコア モジュール",
			"source.skipFiles": "'skipFiles' のためにスキップされました",
			"source.smartstep": "'smartStep' のためにスキップされました",
			"origin.inlined.source.map": "ソース マップからの読み取り専用のインライン化されたコンテンツ",
			"anonymous.function": "(匿名関数)",
			"scope.local.with.count": "ローカル ({1} の {0})",
			"scope.unknown": "不明なスコープの種類: {0}",
			"scope.exception": "例外",
			"eval.not.available": "使用できません",
			"eval.invalid.expression": "正しくない式: {0}",
			"source.not.found": "コンテンツを取得できませんでした。",
			"attribute.path.not.exist": "属性 '{0}' が存在しません ('{1}')。",
			"attribute.path.not.absolute": "属性 '{0}' が絶対 ('{1}') ではありません。絶対的なものにするには、プレフィックスとして '{2}' を追加することを考慮してください。",
			"more.information": "詳細情報",
			"VSND2015": "Node.js が応答しないため、要求 '{_request}' がキャンセルされました。",
			"VSND2016": "Node.js は適切な期間内に要求 '{_request}' に応答しませんでした。",
			"scope.global": "グローバル",
			"scope.local": "ローカル",
			"scope.with": "with",
			"scope.closure": "クロージャ",
			"scope.catch": "Catch",
			"scope.block": "ブロック ",
			"scope.script": "スクリプト"
		},
		"out/node/nodeV8Protocol": {
			"not.connected": "ランタイムに接続していません",
			"runtime.unresponsive": "Node.js が応答しないため、キャンセルされました",
			"runtime.timeout": "{0} ミリ秒後にタイムアウト"
		},
		"out/node/extension/autoAttach": {
			"process.with.pid.label": "プロセス {0}"
		},
		"out/node/extension/cluster": {
			"child.process.with.pid.label": "子プロセス {0}"
		},
		"out/node/extension/configurationProvider": {
			"program.not.found.message": "デバッグするプログラムを見つけることができません。",
			"NVS_HOME.not.found.message": "'runtimeVersion' 属性には Node.js バージョン マネージャー 'nvs' が必要です。",
			"NVM_HOME.not.found.message": "'runtimeVersion' 属性には Node.js バージョン マネージャー 'nvm-windows' または 'nvs' が必要です。",
			"NVM_DIR.not.found.message": "'runtimeVersion' 属性には Node.js バージョン マネージャー 'nvm' または 'nvs' が必要です。",
			"runtime.version.not.found.message": "Node.js バージョン '{0}' が '{1}' にインストールされていません。",
			"node.launch.config.name": "プログラムの起動",
			"mern.starter.explanation": "'{0}' プロジェクトのための起動構成を生成しました。",
			"program.guessed.from.package.json.explanation": "'package.json' を基に起動構成を生成しました。",
			"outFiles.explanation": "生成された JavaScript をカバーするように、 'outFiles' 属性で glob パターンを調整します。"
		},
		"out/node/extension/extension": {
			"status.text.auto.attach.on": "自動アタッチ: オン",
			"status.text.auto.attach.off": "自動アタッチ: オフ",
			"status.tooltip.auto.attach": "デバッグ モードで node.js プロセスに自動的にアタッチ"
		},
		"out/node/extension/loadedScripts": {
			"select.script": "スクリプトの選択",
			"no.loaded.scripts": "利用可能な読み込み済みのスクリプトはありません"
		},
		"out/node/extension/processPicker": {
			"pid.error": "プロセスにアタッチ: 処理 '{0}' をデバッグ モードにできません。",
			"process.id.error": "プロセスにアタッチ: '{0}' はプロセス ID ではないようです。",
			"pickNodeProcess": "アタッチする node.js プロセスを選択してください",
			"process.picker.error": "プロセス ピッカーが失敗しました ({0})",
			"process.id.port.signal": "プロセス id: {0}、デバッグ ポート: {1} ({2})",
			"process.id.signal": "プロセス id: {0} ({1})",
			"process.id.port": "プロセス id: {0}、デバッグ ポート: {1}",
			"process.id.port.legacy": "プロセス id: {0}、デバッグ ポート: {1} (レガシー プロトコル)",
			"cannot.enable.debug.mode.error": "プロセスに添付: プロセス '{0}' ({1}) に対してデバッグ モードを有効にできません。"
		},
		"out/node/extension/protocolDetection": {
			"protocol.switch.legacy.detected": "検出されたため、レガシ プロトコルでデバッグしています。",
			"protocol.switch.unknown.error": "Node.js のバージョンを判別できなかったため、インスペクター プロトコルをデバッグしています ({0})",
			"protocol.switch.legacy.version": "Node.js {0} が検出されたため、以前のプロトコルでデバッグしています。"
		}
	}
}