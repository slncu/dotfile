{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "Git",
			"description": "Git SCM統合",
			"command.clone": "クローン",
			"command.init": "リポジトリの初期化",
			"command.close": "リポジトリを閉じる",
			"command.refresh": "最新の情報に更新",
			"command.openChange": "変更を開く",
			"command.openFile": "ファイルを開く",
			"command.openHEADFile": "HEAD のファイルを開く",
			"command.stage": "変更のステージング",
			"command.stageAll": "すべての変更をステージ",
			"command.stageSelectedRanges": "選択した範囲をステージ",
			"command.revertSelectedRanges": "選択範囲を元に戻す",
			"command.stageChange": "変更のステージング",
			"command.revertChange": "変更を元に戻す",
			"command.unstage": "変更のステージング解除",
			"command.unstageAll": "すべての変更のステージング解除",
			"command.unstageSelectedRanges": "選択した範囲のステージを解除",
			"command.clean": "変更を破棄",
			"command.cleanAll": "すべての変更を破棄",
			"command.commit": "Commit",
			"command.commitStaged": "ステージング済みをコミット",
			"command.commitStagedSigned": "コミットしてステージング (サインオフ)",
			"command.commitStagedAmend": "ステージング済をコミット (修正) ",
			"command.commitAll": "すべてコミット",
			"command.commitAllSigned": "すべてコミット (サインオフ)",
			"command.commitAllAmend": "すべてコミット (修正)",
			"command.undoCommit": "前回のコミットを元に戻す",
			"command.checkout": "チェックアウト先...",
			"command.branch": "ブランチを作成...",
			"command.deleteBranch": "ブランチの削除...",
			"command.renameBranch": "ブランチ名の変更...",
			"command.merge": "ブランチをマージ...",
			"command.createTag": "タグを作成",
			"command.fetch": "フェッチ",
			"command.pull": "プル",
			"command.pullRebase": "プル (リベース)",
			"command.pullFrom": "指定元からプル...",
			"command.push": "プッシュ",
			"command.pushTo": "プッシュ先...",
			"command.pushWithTags": "タグをつけてプッシュ",
			"command.sync": "同期",
			"command.syncRebase": "同期 (リベース)",
			"command.publish": "ブランチの発行",
			"command.showOutput": "Git 出力の表示",
			"command.ignore": "ファイルを .gitignore に追加",
			"command.stashIncludeUntracked": "スタッシュ (未追跡ファイルを含む)",
			"command.stash": "スタッシュ",
			"command.stashPop": "スタッシュを適用して削除...",
			"command.stashPopLatest": "最新のスタッシュを適用して削除",
			"config.enabled": "Git を有効にするかどうか",
			"config.path": "Git 実行可能ファイルのパス",
			"config.autoRepositoryDetection": "レポジトリを自動的に検出するかどうか",
			"config.autorefresh": "自動更新が有効かどうか",
			"config.autofetch": "自動フェッチが有効かどうか",
			"config.enableLongCommitWarning": "長いコミット メッセージについて警告するかどうか",
			"config.confirmSync": "Git リポジトリを同期する前に確認する",
			"config.countBadge": "Git バッジ カウンターを制御します。`all`  はすべての変更をカウントします。 `tracked` は追跡している変更のみカウントします。 `off` はカウントをオフします。",
			"config.checkoutType": "`Checkout to...` を実行するときに表示されるブランチの種類を制御します。`all` はすべての参照を表示します。`local` はローカル ブランチのみ、`tags`  はタグのみ、`remote` はリモート ブランチのみを表示します。 ",
			"config.ignoreLegacyWarning": "旧 Git の警告を無視します",
			"config.ignoreMissingGitWarning": "Git が見つからない場合の警告を無視します",
			"config.ignoreLimitWarning": "リポジトリ内に変更が多い場合は警告を無視します",
			"config.defaultCloneDirectory": "Git リポジトリをクローンする既定の場所",
			"config.enableSmartCommit": "ステージされた変更がない場合はすべての変更をコミットします。",
			"config.enableCommitSigning": "GPG によりデジタル署名されたコミットを有効にします。",
			"config.discardAllScope": "'すべての変更を破棄' コマンドによってどの変更が破棄されるかを制御します。'all' はすべての変更を破棄します。 'tracked' は追跡されているファイルだけを破棄します。 'prompt' は、アクションが実行されるたびにプロンプ​​ト ダイアログを表示します。",
			"config.decorations.enabled": "Git が配色とバッジをエクスプローラーと開いているエディターのビューに提供するかどうかを制御します。",
			"config.promptToSaveFilesBeforeCommit": "コミット前に Git が保存していないファイルを確認すべきかどうかを制御します。",
			"config.showInlineOpenFileAction": "Git 変更の表示内にインラインのファイルを開くアクションを表示するかどうかを制御します。",
			"config.inputValidation": "コミット メッセージの入力検証をいつ表示するかを制御します。",
			"config.detectSubmodules": "Git のサブモジュールを自動的に検出するかどうかを制御します。",
			"colors.added": "追加したリソースの配色。",
			"config.detectSubmodulesLimit": "Git サブモジュールの検出の制限を制御します。",
			"colors.modified": "リソースを改変した場合の配色",
			"colors.deleted": "リソースを検出した場合の配色",
			"colors.untracked": "リソースを追跡しない場合の配色",
			"colors.ignored": "リソースを無視する場合の配色",
			"colors.conflict": "リソースが競合する場合の配色",
			"colors.submodule": "サブモジュールの配色。"
		},
		"out/statusbar": {
			"checkout": "チェックアウト...",
			"sync changes": "変更の同期",
			"publish changes": "変更の発行",
			"syncing changes": "変更を同期しています..."
		},
		"out/repository": {
			"open": "開く",
			"index modified": "変更されたインデックス",
			"modified": "変更済み",
			"index added": "インデックスの追加",
			"index deleted": "削除されたインデックス",
			"deleted": "削除済み",
			"index renamed": "インデックスの名前変更",
			"index copied": "インデックスをコピー",
			"untracked": "追跡対象外",
			"ignored": "無視",
			"both deleted": "双方とも削除",
			"added by us": "こちら側による追加",
			"deleted by them": "あちら側による削除",
			"added by them": "あちら側による追加",
			"deleted by us": "こちら側による削除",
			"both added": "双方とも追加",
			"both modified": "双方とも変更",
			"commitMessage": "Message (press {0} to commit)",
			"commit": "コミット",
			"merge changes": "変更のマージ",
			"staged changes": "ステージング済みの変更",
			"changes": "変更",
			"commitMessageWhitespacesOnlyWarning": "現在のコミット メッセージには空白文字のみが含めています",
			"commitMessageCountdown": "現在の行で残り {0} 文字",
			"commitMessageWarning": "現在の行で {1} から {0} 文字オーバー",
			"neveragain": "今後は表示しない",
			"huge": "'{0}' のGit リポジトリにアクティブな変更が多いため、 Git 機能の一部のみが有効になります。"
		},
		"out/model": {
			"too many submodules": "'{0}' リポジトリに {1} 個のサブモジュールがあり、自動では開かれません。 ファイルを開くことで、それぞれを個別に開くことができます。",
			"no repositories": "利用可能なリポジトリがありません",
			"pick repo": "リポジトリの選択"
		},
		"out/main": {
			"looking": "Git を求めて次の場所を探しています: {0}",
			"using git": "{1} から Git {0} を使用しています",
			"downloadgit": "Git のダウンロード",
			"neverShowAgain": "今後は表示しない",
			"notfound": "Git が見つかりません。Git をインストールするか 'git.path' 設定でパスを構成してください。",
			"updateGit": "Git の更新",
			"git20": "git {0} がインストールされているようです。Code は Git 2 以上で最適に動作します"
		},
		"out/commands": {
			"tag at": "{0} のタグ",
			"remote branch at": "{0} でのリモート ブランチ",
			"create branch": "$(plus) 新しいブランチを作成",
			"repourl": "リポジトリ URL",
			"selectFolder": "リポジトリの場所を選択",
			"cloning": "Git リポジトリ '{0}' を複製しています...",
			"proposeopen": "クローンしたリポジトリを開きますか?",
			"openrepo": "リポジトリを開く",
			"add": "ワークスペースに追加",
			"proposeopen2": "複製したリポジトリを開きますか? または現在のワークスペースに追加しますか?",
			"init": "Git リポジトリを初期化するワークスペース フォルダーを選択してください",
			"init repo": "リポジトリの初期化",
			"create repo": "リポジトリの初期化",
			"are you sure": "'{0}' に Git リポジトリを作成します。続行してもよろしいですか?",
			"HEAD not available": "'{0}' の HEAD バージョンは利用できません。",
			"confirm stage files with merge conflicts": "マージの競合がある {0} 個のファイルをステージしてもよろしいですか?",
			"confirm stage file with merge conflicts": "マージの競合がある {0} をステージしてもよろしいですか? ",
			"yes": "はい",
			"discard": "変更を破棄",
			"confirm delete": "本当に {0} を削除してもよろしいですか?",
			"delete file": "ファイルを削除",
			"confirm discard": "{0} の変更を破棄しますか?",
			"confirm discard multiple": "{0} 個のファイルの変更内容を破棄しますか?",
			"warn untracked": "未追跡ファイル {0} が削除されます!",
			"confirm discard all single": "{0} の変更を破棄しますか?",
			"confirm discard all": "{0} 個のファイルのすべての変更を破棄してもよろしいですか?\nこの変更は元に戻すことができません!\n現在のワーキング セットは永久に失われます。",
			"discardAll multiple": "1 つのファイルを破棄",
			"discardAll": "{0} 個のファイルをすべて破棄",
			"confirm delete multiple": "本当に {0} 個のファイルを削除してもよろしいですか?",
			"delete files": "複数のファイルを削除",
			"there are untracked files single": "破棄すると次の未追跡ファイルがディスクから削除されます: {0}。",
			"there are untracked files": "破棄すると {0} 個の未追跡ファイルがディスクから削除されます。",
			"confirm discard all 2": "{0}\n\nこの変更は元に戻すことはできません。現在のワーキング セットは永久に失われます。",
			"yes discard tracked": "1 つの追跡ファイルを破棄",
			"yes discard tracked multiple": "{0} 個の追跡ファイルを破棄",
			"unsaved files single": "次のファイルが保存されていません: {0}。\n\nコミット前に保存しますか?",
			"unsaved files": "{0} 個の保存されていないファイルがあります。\n\nコミット前に保存しますか?",
			"save and commit": "すべて保存してコミットする",
			"commit": "とにかくコミットする",
			"no staged changes": "コミットするステージされた変更がありません。\n\nすべての変更を自動的にステージして、直接コミットしますか?",
			"always": "常に行う",
			"no changes": "コミットする必要のある変更はありません。",
			"commit message": "コミット メッセージ",
			"provide commit message": "コミット メッセージを入力してください",
			"select a ref to checkout": "チェックアウトする参照を選択",
			"branch name": "ブランチ名",
			"provide branch name": "ブランチ名を指定してください",
			"select branch to delete": "削除するブランチの選択",
			"confirm force delete branch": "ブランチ '{0}' はマージされていません。それでも削除しますか？",
			"delete branch": "ブランチの削除",
			"invalid branch name": "無効なブランチ名",
			"branch already exists": "ブランチ名 '{0}' は既に存在します",
			"select a branch to merge from": "マージ元のブランチを選択",
			"merge conflicts": "マージの競合があります。コミットする前にこれを解決してください。",
			"tag name": "タグ名",
			"provide tag name": "タグ名を入力してください",
			"tag message": "メッセージ",
			"provide tag message": "注釈付きタグにつけるメッセージを入力してください",
			"no remotes to fetch": "リポジトリには、フェッチ元として構成されているリモートがありません。",
			"no remotes to pull": "リポジトリには、プル元として構成されているリモートがありません。",
			"pick remote pull repo": "リモートを選んで、ブランチを次からプルします:",
			"no remotes to push": "リポジトリには、プッシュ先として構成されているリモートがありません。",
			"nobranch": "リモートにプッシュするブランチをチェックアウトしてください。",
			"confirm publish branch": "'{0}' ブランチに上流ブランチはありません。このブランチを公開しますか?",
			"ok": "OK",
			"push with tags success": "タグが正常にプッシュされました。",
			"pick remote": "リモートを選んで、ブランチ '{0}' を次に公開します:",
			"sync is unpredictable": "このアクションはコミットを '{0}/{1}' との間でプッシュしたりプルしたりします。",
			"never again": "OK、今後は表示しない",
			"no remotes to publish": "リポジトリには、発行先として構成されているリモートがありません。",
			"no changes stash": "スタッシュする変更がありません。",
			"provide stash message": "必要に応じてスタッシュ メッセージを入力してください",
			"stash message": "スタッシュ メッセージ",
			"no stashes": "復元するスタッシュがありません。",
			"pick stash to pop": "適用するスタッシュを選択してください",
			"clean repo": "チェックアウトの前に、リポジトリの作業ツリーを消去してください。",
			"cant push": "参照仕様をリモートにプッシュできません。最初に 'Pull' を実行して変更を統合してください。",
			"git error details": "Git: {0}",
			"git error": "Git エラー",
			"open git log": "Git ログを開く"
		},
		"out/autofetch": {
			"yes": "はい",
			"no": "いいえ",
			"not now": "後で通知する",
			"suggest auto fetch": "Code が [定期的に 'git fetch']({0}) を実行してもよろしいですか?"
		},
		"out/askpass-main": {
			"missOrInvalid": "資格情報が見つからないか、無効です。"
		}
	}
}