{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "TypeScript と JavaScript の言語機能",
			"description": "JavaScript と TypeScript ファイルに豊富な言語サポートを提供。",
			"reloadProjects.title": "プロジェクトの再読み込み",
			"configuration.typescript": "TypeScript",
			"typescript.useCodeSnippetsOnMethodSuggest.dec": "パラメーター シグネチャを含む完全な関数。",
			"typescript.tsdk.desc": "使用する tsserver と lib*.d.ts ファイルが含まれているフォルダーのパスを指定します。",
			"typescript.disableAutomaticTypeAcquisition": "種類の自動的な取得を無効にします。",
			"typescript.tsserver.log": "ファイルへの TS サーバーのログを有効にします。このログは TS サーバーの問題を診断するために使用できます。ログには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。",
			"typescript.tsserver.pluginPaths": "Typescript 言語サービス プラグインを検出する追加のパス。ワークスペースで TypeScript 2.3.0 以降を使用する必要があります。",
			"typescript.tsserver.pluginPaths.item": "絶対または相対パスのいずれか。相対パスはワークスペース フォルダーに対して解決されます。",
			"typescript.tsserver.trace": "TS サーバーに送信されるメッセージのトレースを有効にします。このトレースは TS サーバーの問題を診断するために使用できます。トレースには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。",
			"typescript.validate.enable": "TypeScript の検証を有効/無効にします。",
			"typescript.format.enable": "既定の TypeScript フォーマッタを有効/無効にします。",
			"javascript.format.enable": "既定の JavaScript フォーマッタを有効/無効にします。",
			"format.insertSpaceAfterCommaDelimiter": "コンマ区切り記号の後のスペース処理を定義します。",
			"format.insertSpaceAfterConstructor": "コンストラクター キーワードの後にあるスペース処理を定義します。ワークスペースで TypeScript 2.3.0 以降を使用する必要があります。",
			"format.insertSpaceAfterSemicolonInForStatements": " for ステートメント内のセミコロンの後のスペース処理を定義します。",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "2 項演算子の後のスペース処理を定義します。",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "制御フロー ステートメント内のキーワードの後のスペース処理を定義します。",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "匿名関数の関数キーワードの後のスペース処理を定義します。",
			"format.insertSpaceBeforeFunctionParenthesis": "関数の引数のかっこの前にあるスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "左右の空でないかっこの間のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "左右の空でない角かっこの間のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "左右の空でないかっこの間のスペース処理を定義します。ワークスペースで TypeScript 2.3.0 以上を使用する必要があります。",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "テンプレート文字列の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "JSX 式の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。",
			"format.insertSpaceAfterTypeAssertion": "TypeScript の型アサーションの後のスペース処理を定義します。ワークスペースで TypeScript 2.4 以上を使用する必要があります。",
			"format.placeOpenBraceOnNewLineForFunctions": "新しい行に関数の始め波かっこを配置するかどうかを定義します。",
			"format.placeOpenBraceOnNewLineForControlBlocks": "新しい行にコントロール ブロックの始め波かっこを配置するかどうかを定義します。",
			"javascript.validate.enable": "JavaScript の検証を有効/無効にします。",
			"goToProjectConfig.title": "プロジェクト構成に移動",
			"javascript.referencesCodeLens.enabled": "JavaScript ファイル内で CodeLens の参照を有効/無効にします。",
			"typescript.referencesCodeLens.enabled": "TypeScript ファイルで CodeLens の参照を有効/無効にします。",
			"typescript.implementationsCodeLens.enabled": "CodeLens の実装を有効または無効にします。",
			"typescript.openTsServerLog.title": "TS サーバーのログを開く",
			"typescript.restartTsServer": "TS サーバーを再起動",
			"typescript.selectTypeScriptVersion.title": "TypeScript のバージョンの選択",
			"typescript.reportStyleChecksAsWarnings": "スタイルチェックレポートを警告扱いとする",
			"jsDocCompletion.enabled": " 自動 JSDoc コメントを有効/無効にします",
			"javascript.implicitProjectConfig.checkJs": "JavaScript ファイルのセマンティック チェックを有効/無効にします。既存の jsconfi.json ファイルや tsconfi.json ファイルの設定はこれより優先されます。ワークスペースで TypeScript 2.3.1 以上を使用する必要があります。",
			"typescript.npm": "種類の自動的な取得に使用される NPM 実行可能ファイルへのパスを指定します。ワークスペースで TypeScript 2.3.4 以上を使用する必要があります。",
			"typescript.check.npmIsInstalled": "型定義の自動取得に NPM がインストールされているかどうかを確認します。",
			"javascript.nameSuggestions": "JavaScript の候補リスト内でファイルから一意の名前を含むかどうかを有効/無効にします。",
			"typescript.tsc.autoDetect": "tsc タスクの自動検出を制御します。'off' はこの機能を無効にします。'build' は 1 つのコンパイル実行タスクのみを表示します。'watch' はコンパイルとウォッチ タスクのみを表示します。'on' はビルド タスクとウォッチ タスクの両方を表示します。既定値は 'on' です。",
			"typescript.problemMatchers.tsc.label": "TypeScript の問題",
			"typescript.problemMatchers.tscWatch.label": "TypeScript の問題 (ウォッチ モード)",
			"typescript.quickSuggestionsForPaths": "Import パスを入力するときのクイック候補を有効/無効にします。",
			"typescript.locale": "JavaScript と TypeScript のエラーを報告するために使用するロケールを設定します。ワークスペースで TypeScript 2.6.0 以上を使用する必要があります。既定値の 'null' では VS Code のロケールを使用します。",
			"javascript.implicitProjectConfig.experimentalDecorators": "プロジェクト外の JavaScript ファイルの 'experimentalDecorators' を有効/無効にします。既存の jsconfi.json ファイルや tsconfi.json ファイルの設定はこれより優先されます。ワークスペースで TypeScript 2.3.1 以上を使用する必要があります。",
			"typescript.autoImportSuggestions.enabled": "自動インポートの提案を有効/無効にします。ワークスペースで TypeScript 2.6.1 以上を使用する必要があります。",
			"taskDefinition.tsconfig.description": "TS ビルドを定義する tsconfig ファイル。",
			"javascript.suggestionActions.enabled": "エディター内で JavaScript ファイルの診断の提案を有効/無効にします。ワークスペースで TypeScript 2.8 以上を使用する必要があります。",
			"typescript.suggestionActions.enabled": "エディター内で TypeScript ファイルの診断の提案を有効/無効にします。ワークスペースで TypeScript 2.8 以上を使用する必要があります。",
			"typescript.preferences.quoteStyle": "クイック修正に使用するのに好ましい引用符のスタイル: 'single' 引用符、'double' 引用符、既存の import から種類を推測する 'auto'。ワークスペースで TypeScript 2.9 以上を使用する必要があります。",
			"typescript.preferences.importModuleSpecifier": "自動 import で優先されるパスのスタイル:\n- ファイルの場所に相対的な \"relative\"。\n- 'jsconfig.json' / 'tsconfig.json' で構成されている 'baseUrl' に基づく \"non-relative\"。\n- 最短のパス型を推測する \"auto\"。\nワークスペースで TypeScript 2.9 以上を使用する必要があります。",
			"typescript.showUnused": "コード内で使用されていない変数の強調表示を有効/無効にします。ワークスペースで TypeScript 2.9 以上を使用する必要があります。",
			"typescript.updateImportsOnFileMove.enabled": "VS Code でファイルの名前変更や移動するときの import パスの自動的な更新を有効/無効にします。有効な値は、名前変更時に確認をする 'prompt'、常に自動的にパスを更新する 'always'、パスの名前を変更して確認を行わない 'never' です。ワークスペースで TypeScript 2.9 以上を使用する必要があります。"
		},
		"out/utils/versionProvider": {
			"couldNotLoadTsVersion": "このパスでは TypeScript のバージョンを読み込むことができません",
			"noBundledServerFound": "VS Code の tsserver が適切に動作しないウイルス検出ツールなどの他アプリケーションにより削除されました。VS Code を再インストールしてください。"
		},
		"out/utils/versionPicker": {
			"useVSCodeVersionOption": "VS Code のバージョンを使用",
			"useWorkspaceVersionOption": "ワークスペースのバージョンを使用",
			"learnMore": "詳細情報",
			"selectTsVersion": "JavaScript および TypeScript 言語の機能に使用する TypeScript バージョンを選択します"
		},
		"out/utils/typingsStatus": {
			"installingPackages": "より適した TypeScript IntelliSense に関するデータをフェッチしています",
			"typesInstallerInitializationFailed.title": "JavaScript 言語機能のための型定義ファイルをインストールできませんでした。NPM のインストールを確認するか、ユーザー設定で  'typescript.npm' を構成してください。詳細は [こちら]({0}) をクリックしてください。",
			"typesInstallerInitializationFailed.doNotCheckAgain": "今後は表示しない"
		},
		"out/utils/projectStatus": {
			"hintExclude": "プロジェクト全体の JavaScript/TypeScript 言語機能を有効にするには、多数のファイルが含まれるフォルダーを除外します。例: {0}",
			"hintExclude.generic": "プロジェクト全体の JavaScript/TypeScript 言語機能を有効にするには、作業していないソース ファイルが含まれるサイズの大きなフォルダーを除外します。",
			"large.label": "除外の構成",
			"hintExclude.tooltip": "プロジェクト全体の JavaScript/TypeScript 言語機能を有効にするには、作業していないソース ファイルが含まれるサイズの大きなフォルダーを除外します。"
		},
		"out/utils/logger": {
			"channelName": "TypeScript"
		},
		"out/utils/api": {
			"invalidVersion": "バージョンが無効です"
		},
		"out/features/updatePathsOnRename": {
			"prompt": "移動したファイルの import を自動的に更新しますか: '{0}'?",
			"reject.title": "いいえ",
			"accept.title": "はい",
			"always.title": "はい。常に import を自動的に更新します。",
			"never.title": "いいえ。常に import を自動的に更新しません。"
		},
		"out/features/task": {
			"buildTscLabel": "ビルド - {0}",
			"buildAndWatchTscLabel": "ウォッチ - {0}"
		},
		"out/features/referencesCodeLens": {
			"oneReferenceLabel": "1 個の参照",
			"manyReferenceLabel": "{0} 個の参照",
			"referenceErrorLabel": "参照を判別できませんでした"
		},
		"out/features/quickFix": {
			"fixAllInFileLabel": "{0} (ファイルの中のすべてを修正する)"
		},
		"out/features/organizeImports": {
			"oraganizeImportsAction.title": "インポートを整理"
		},
		"out/features/jsDocCompletions": {
			"typescript.jsDocCompletionItem.documentation": "JSDoc コメント"
		},
		"out/features/implementationsCodeLens": {
			"implementationsErrorLabel": "実装を特定できませんでした",
			"oneImplementationLabel": "1 個の実装",
			"manyImplementationLabel": "{0} 個の実装"
		},
		"out/features/directiveCommentCompletions": {
			"ts-check": "JavaScript ファイルのセマンティック チェックを有効にします。 ファイルの先頭にある必要があります。",
			"ts-nocheck": "JavaScript ファイルのセマンティック チェックを無効にします。 ファイルの先頭にある必要があります。",
			"ts-ignore": "ファイルの次の行で @ts-check エラーを抑制します。"
		},
		"out/features/completions": {
			"selectCodeAction": "適用するコード アクションを選択",
			"acquiringTypingsLabel": "Typings の定義ファイルを取得中...",
			"acquiringTypingsDetail": "IntelliSense の Typings の定義ファイルを取得しています。",
			"autoImportLabel": "{0} から自動インポート"
		},
		"out/typescriptServiceClient": {
			"noServerFound": "パス {0} は、有効な tsserver インストールを指していません。バンドルされている TypeScript バージョンにフォールバックしています。",
			"serverCouldNotBeStarted": "TypeScript 言語サーバーを起動できません。エラー メッセージ: {0}",
			"typescript.openTsServerLog.notSupported": "TS サーバーのログには TS 2.2.2 以降が必要です",
			"typescript.openTsServerLog.loggingNotEnabled": "TS サーバーのログがオフになっています。ログを有効にするには、`typescript.tsserver.log` を設定して TS サーバーを再起動してください",
			"typescript.openTsServerLog.enableAndReloadOption": "ログを有効にして、TS サーバーを再起動する",
			"typescript.openTsServerLog.noLogFile": "TS サーバーはログを開始していません。",
			"openTsServerLog.openFileFailedFailed": "TS サーバーのログ ファイルを開くことができませんでした",
			"serverDiedAfterStart": "TypeScript 言語サービスは、開始直後に 5 回停止しました。サービスは再開されません。",
			"serverDiedReportIssue": "問題の報告",
			"serverDied": "TypeScript 言語サービスは、直前の 5 分間に 5 回、予期せずに停止しました。"
		},
		"out/commands": {
			"typescript.projectConfigNoWorkspace": "TypeScript または JavaScript プロジェクトを使用するには、VS Code でフォルダーを開いてください",
			"typescript.projectConfigUnsupportedFile": "TypeScript または JavaScript のプロジェクトを判別できませんでした。サポートされていないファイルの種類です",
			"typescript.projectConfigCouldNotGetInfo": "TypeScript または JavaScript のプロジェクトを判別できませんでした",
			"typescript.noTypeScriptProjectConfig": "ファイルは TypeScript プロジェクトの一部ではありません。詳細情報は [こちら]({1}) をクリックしてください。",
			"typescript.noJavaScriptProjectConfig": "ファイルは JavaScript プロジェクトの一部ではありません。詳細情報は [こちら]({1}) をクリックしてください。",
			"typescript.configureTsconfigQuickPick": "tsconfig.json を構成する",
			"typescript.configureJsconfigQuickPick": "jsconfig.json を構成する"
		}
	}
}