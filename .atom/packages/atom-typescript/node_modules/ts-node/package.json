{
  "_args": [
    [
      {
        "raw": "ts-node@https://registry.npmjs.org/ts-node/-/ts-node-1.7.0.tgz",
        "scope": null,
        "escapedName": "ts-node",
        "name": "ts-node",
        "rawSpec": "https://registry.npmjs.org/ts-node/-/ts-node-1.7.0.tgz",
        "spec": "https://registry.npmjs.org/ts-node/-/ts-node-1.7.0.tgz",
        "type": "remote"
      },
      "/private/var/folders/tn/kgh8xc8x3rg33rrzx49pqyp80000gn/T/apm-install-dir-11764-46486-1ilwywv.9vucy2e29/node_modules/atom-typescript"
    ]
  ],
  "_from": "ts-node@1.7.0",
  "_id": "ts-node@1.7.0",
  "_inCache": true,
  "_location": "/atom-typescript/ts-node",
  "_phantomChildren": {
    "any-promise": "1.3.0",
    "is-utf8": "0.2.1",
    "parse-json": "2.2.0",
    "strip-json-comments": "2.0.1"
  },
  "_requested": {
    "raw": "ts-node@https://registry.npmjs.org/ts-node/-/ts-node-1.7.0.tgz",
    "scope": null,
    "escapedName": "ts-node",
    "name": "ts-node",
    "rawSpec": "https://registry.npmjs.org/ts-node/-/ts-node-1.7.0.tgz",
    "spec": "https://registry.npmjs.org/ts-node/-/ts-node-1.7.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [],
  "_resolved": "https://registry.npmjs.org/ts-node/-/ts-node-1.7.0.tgz",
  "_shasum": "18be2d80508008a3a4640e17982df73a402b7416",
  "_shrinkwrap": null,
  "_spec": "ts-node@https://registry.npmjs.org/ts-node/-/ts-node-1.7.0.tgz",
  "_where": "/private/var/folders/tn/kgh8xc8x3rg33rrzx49pqyp80000gn/T/apm-install-dir-11764-46486-1ilwywv.9vucy2e29/node_modules/atom-typescript",
  "author": {
    "name": "Blake Embrey",
    "email": "hello@blakeembrey.com",
    "url": "http://blakeembrey.me"
  },
  "bin": {
    "ts-node": "dist/bin.js"
  },
  "bugs": {
    "url": "https://github.com/TypeStrong/ts-node/issues"
  },
  "dependencies": {
    "arrify": "^1.0.0",
    "chalk": "^1.1.1",
    "make-error": "^1.1.1",
    "minimist": "^1.2.0",
    "mkdirp": "^0.5.1",
    "pinkie": "^2.0.4",
    "source-map-support": "^0.4.0",
    "tsconfig": "^5.0.2",
    "v8flags": "^2.0.11",
    "xtend": "^4.0.0",
    "yn": "^1.2.0"
  },
  "description": "TypeScript execution environment and REPL for node",
  "devDependencies": {
    "chai": "^3.0.0",
    "istanbul": "^0.4.0",
    "mocha": "^3.0.0",
    "ntypescript": "^1.201507091536.1",
    "proxyquire": "^1.7.2",
    "semver": "^5.1.0",
    "tslint": "^3.13.0",
    "tslint-config-standard": "^1.5.0",
    "typescript": "^2.0.3",
    "typings": "^1.0.4"
  },
  "files": [
    "dist/",
    "typings.js",
    "register.js",
    "LICENSE"
  ],
  "homepage": "https://github.com/TypeStrong/ts-node",
  "keywords": [
    "typescript",
    "node",
    "runtime",
    "environment",
    "ts",
    "compiler"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "ts-node",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "# TypeScript Node\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\n> TypeScript execution environment and REPL for node. **Works with `typescript@>=1.5`**.\n\n## Installation\n\n```sh\nnpm install -g ts-node\n\n# Install a TypeScript compiler (requires `typescript` by default).\nnpm install -g typescript\n```\n\n## Features\n\n* Execute TypeScript files with node\n* Interactive REPL\n* Execute (and print) TypeScript through the CLI\n* Uses source maps\n* Loads compiler options and `.d.ts` files from `tsconfig.json`\n\n## Usage\n\n```sh\n# Execute a script as you world normally with `node`.\nts-node script.ts\n\n# Starts the TypeScript REPL.\nts-node\n\n# Execute code with TypeScript.\nts-node -e 'console.log(\"Hello, world!\")'\n\n# Execute, and print, code with TypeScript.\nts-node -p '\"Hello, world!\"'\n\n# Pipe scripts to execute with TypeScript.\necho \"console.log('Hello, world!')\" | ts-node\n```\n\n![TypeScript REPL](https://github.com/TypeStrong/ts-node/raw/master/screenshot.png)\n\n### Mocha\n\n```sh\nmocha --compilers ts:ts-node/register,tsx:ts-node/register [...args]\n```\n\n### Tape\n\n```sh\nts-node node_modules/tape/bin/tape [...args]\n```\n\n### Gulp\n\n```sh\n# Just create a `gulpfile.ts` and run `gulp`.\ngulp\n```\n\n## How It Works\n\n**TypeScript Node** works by registering the TypeScript compiler for the `.ts`, `.tsx` and - when `allowJs` is enabled - `.js` extensions. When node.js has a file extension registered (the `require.extensions` object), it will use the extension internally with module resolution. By default, when an extension is unknown to node.js, it will fallback to handling the file as `.js` (JavaScript).\n\n**P.S.** This means that if you don't register an extension, it'll be compiled as JavaScript. When `ts-node` is used with `allowJs`, JavaScript files are transpiled using the TypeScript compiler.\n\n## Loading `tsconfig.json`\n\n**Typescript Node** uses `tsconfig.json` automatically, use `-n` to skip loading `tsconfig.json`.\n\n## Configuration Options\n\nYou can set options by passing them in before the script.\n\n```sh\nts-node --compiler ntypescript --project src --ignoreWarnings 2304 hello-world.ts\n```\n\n* **--project, -P** Path to resolve `tsconfig.json` from (or `false` to disable) (also `process.env.TS_NODE_PROJECT`)\n* **--compiler, -C** Use a custom, require-able TypeScript compiler compatible with `typescript@>=1.5.0-alpha` (also `process.env.TS_NODE_COMPILER`)\n* **--ignore** Specify an array of regular expression strings for `ts-node` to skip compiling as TypeScript (defaults to `/node_modules/`, `false` to disable) (also `process.env.TS_NODE_IGNORE`)\n* **--ignoreWarnings, -I** Set an array of TypeScript diagnostic codes to ignore (also `process.env.TS_NODE_IGNORE_WARNINGS`)\n* **--disableWarnings, -D** Ignore all TypeScript errors (also `process.env.TS_NODE_DISABLE_WARNINGS`)\n* **--compilerOptions, -O** Set compiler options using JSON (E.g. `--compilerOptions '{\"target\":\"es6\"}'`) (also `process.env.TS_NODE_COMPILER_OPTIONS`)\n* **--fast, -F** Use TypeScript's `transpileModule` mode (no type checking, but faster compilation) (also `process.env.TS_NODE_FAST`)\n* **--lazy, -L** Lazily defer TypeScript initialization until first `.ts` file\n* **--no-cache** Skip hitting the compiled JavaScript cache (also `process.env.TS_NODE_CACHE`)\n* **--cache-directory** Configure the TypeScript cache directory (also `process.env.TS_NODE_CACHE_DIRECTORY`)\n\n## Programmatic Usage\n\n```js\nrequire('ts-node').register({ /* options */ })\n\n// Or using the shortcut file.\nrequire('ts-node/register')\n```\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/ts-node.svg?style=flat\n[npm-url]: https://npmjs.org/package/ts-node\n[downloads-image]: https://img.shields.io/npm/dm/ts-node.svg?style=flat\n[downloads-url]: https://npmjs.org/package/ts-node\n[travis-image]: https://img.shields.io/travis/TypeStrong/ts-node.svg?style=flat\n[travis-url]: https://travis-ci.org/TypeStrong/ts-node\n[coveralls-image]: https://img.shields.io/coveralls/TypeStrong/ts-node.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/TypeStrong/ts-node?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/TypeStrong/ts-node.git"
  },
  "scripts": {
    "build": "npm run build-ts",
    "build-ts": "rm -rf dist && tsc",
    "lint": "tslint \"src/**/*.ts\"",
    "prepublish": "typings install && npm run build",
    "test": "npm run build && npm run lint && npm run test-cov",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- \"dist/**/*.spec.js\" -R spec --bail",
    "test-spec": "mocha dist/**/*.spec.js -R spec --bail"
  },
  "version": "1.7.0"
}
