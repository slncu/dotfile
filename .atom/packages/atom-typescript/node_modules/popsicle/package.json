{
  "_args": [
    [
      {
        "raw": "popsicle@https://registry.npmjs.org/popsicle/-/popsicle-8.2.0.tgz",
        "scope": null,
        "escapedName": "popsicle",
        "name": "popsicle",
        "rawSpec": "https://registry.npmjs.org/popsicle/-/popsicle-8.2.0.tgz",
        "spec": "https://registry.npmjs.org/popsicle/-/popsicle-8.2.0.tgz",
        "type": "remote"
      },
      "/private/var/folders/tn/kgh8xc8x3rg33rrzx49pqyp80000gn/T/apm-install-dir-11764-46486-1ilwywv.9vucy2e29/node_modules/atom-typescript"
    ]
  ],
  "_from": "popsicle@8.2.0",
  "_id": "popsicle@8.2.0",
  "_inCache": true,
  "_location": "/atom-typescript/popsicle",
  "_phantomChildren": {},
  "_requested": {
    "raw": "popsicle@https://registry.npmjs.org/popsicle/-/popsicle-8.2.0.tgz",
    "scope": null,
    "escapedName": "popsicle",
    "name": "popsicle",
    "rawSpec": "https://registry.npmjs.org/popsicle/-/popsicle-8.2.0.tgz",
    "spec": "https://registry.npmjs.org/popsicle/-/popsicle-8.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [],
  "_resolved": "https://registry.npmjs.org/popsicle/-/popsicle-8.2.0.tgz",
  "_shasum": "ff4401005cab43a9418a91410611c00197712d21",
  "_shrinkwrap": null,
  "_spec": "popsicle@https://registry.npmjs.org/popsicle/-/popsicle-8.2.0.tgz",
  "_where": "/private/var/folders/tn/kgh8xc8x3rg33rrzx49pqyp80000gn/T/apm-install-dir-11764-46486-1ilwywv.9vucy2e29/node_modules/atom-typescript",
  "author": {
    "name": "Blake Embrey",
    "email": "hello@blakeembrey.com",
    "url": "http://blakeembrey.me"
  },
  "browser": {
    "buffer": false,
    "form-data": "./dist/browser/form-data.js",
    "tough-cookie": "./dist/browser/tough-cookie.js",
    "./dist/index.js": "./dist/browser.js",
    "./dist/plugins/index.js": "./dist/plugins/browser.js",
    "./dist/plugins/is-host/index.js": "./dist/plugins/is-host/browser.js"
  },
  "bugs": {
    "url": "https://github.com/blakeembrey/popsicle/issues"
  },
  "dependencies": {
    "any-promise": "^1.3.0",
    "arrify": "^1.0.0",
    "concat-stream": "^1.4.7",
    "form-data": "^2.0.0",
    "make-error-cause": "^1.2.1",
    "throwback": "^1.1.0",
    "tough-cookie": "^2.0.0",
    "xtend": "^4.0.0"
  },
  "description": "Simple HTTP requests for node and the browser",
  "devDependencies": {
    "blue-tape": "^1.0.0",
    "bluebird": "^3.0.5",
    "body-parser": "^1.9.2",
    "browserify": "^13.0.0",
    "envify": "^3.4.0",
    "express": "^4.10.2",
    "istanbul": "^0.4.0",
    "methods": "^1.1.2",
    "tap-spec": "^4.1.1",
    "tape-run": "2.1.0",
    "typescript": "^1.8.9",
    "typings": "^1.0.2"
  },
  "files": [
    "dist/",
    "typings.json",
    "LICENSE",
    "logo.svg"
  ],
  "homepage": "https://github.com/blakeembrey/popsicle",
  "keywords": [
    "request",
    "ajax",
    "http",
    "node",
    "browser",
    "promise",
    "agent"
  ],
  "license": "MIT",
  "main": "dist/common.js",
  "name": "popsicle",
  "optionalDependencies": {},
  "readme": "# ![Popsicle](https://cdn.rawgit.com/blakeembrey/popsicle/master/logo.svg)\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\n> **Popsicle** is the easiest way to make HTTP requests - a consistent, intuitive and tiny API that works on node and the browser. 9.64 kB in browsers, after minification and gzipping.\n\n```js\npopsicle.get('/users.json')\n  .then(function (res) {\n    console.log(res.status) //=> 200\n    console.log(res.body) //=> { ... }\n    console.log(res.headers) //=> { ... }\n  })\n```\n\n## Installation\n\n```\nnpm install popsicle --save\n```\n\n## Usage\n\n```js\nvar popsicle = require('popsicle')\n\npopsicle.request({\n  method: 'POST',\n  url: 'http://example.com/api/users',\n  body: {\n    username: 'blakeembrey',\n    password: 'hunter2'\n  },\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n})\n  .use(popsicle.plugins.parse('json'))\n  .then(function (res) {\n    console.log(res.status) // => 200\n    console.log(res.body) //=> { ... }\n    console.log(res.get('Content-Type')) //=> 'application/json'\n  })\n```\n\n**Popsicle** is ES6-ready and aliases `request` to the default export. Try using `import popsicle from 'popsicle'` or import specific methods using `import { get, defaults } from 'popsicle'`. Exports:\n\n* **request(options)** Default request handler - `defaults({})`\n* **get(options)** Alias of `request` (GET is the default method)\n* **del(options)** Alias of `defaults({ method: 'delete' })`\n* **head(options)** Alias of `defaults({ method: 'head' })`\n* **patch(options)** Alias of `defaults({ method: 'patch' })`\n* **post(options)** Alias of `defaults({ method: 'post' })`\n* **put(options)** Alias of `defaults({ method: 'put' })`\n* **defaults(options)** Create a new Popsicle instance using `defaults`\n* **form(obj?)** Cross-platform form data object\n* **plugins** Exposes the default plugins (Object)\n* **jar(store?)** Create a cookie jar instance for Node.js\n* **transport** Default transportation layer (Object)\n* **Request(options)** Constructor for the `Request` class\n* **Response(options)** Constructor for the `Response` class\n\n### Handling Requests\n\n* **url** The resource location\n* **method** The HTTP request method (default: `\"GET\"`)\n* **headers** An object with HTTP headers, header name to value (default: `{}`)\n* **query** An object or string to be appended to the URL as the query string\n* **body** An object, string, form data, stream (node), etc to pass with the request\n* **timeout** The number of milliseconds to wait before aborting the request (default: `Infinity`)\n* **use** The array of plugins to be used (default: `[stringify(), headers()]`)\n* **options** Raw options used by the transport layer (default: `{}`)\n* **transport** Set the transport layer (default: `text`)\n\n#### Middleware\n\n##### `stringify`\n\nAutomatically serialize the request body into a string (E.g. JSON, URL-encoded or multipart).\n\n##### `headers`\n\nSets up default headers for environments. For example, `Content-Length`, `User-Agent`, `Accept`, etc.\n\n##### `parse`\n\nAutomatically parses the response body by allowed type(s).\n\n* **json** Parse response as JSON\n* **urlencoded** Parse response as URL-encoded\n\n```js\npopsicle.get('/users')\n  .use(popsicle.plugins.parse(['json', 'urlencoded']))\n  .then(() => ...)\n```\n\n#### Transports\n\nPopsicle comes with two built-in transports, one for node (using `{http,https}.request`) and one for browsers (using `XMLHttpRequest`). These transports have a number of \"types\" built-in for handling the response body.\n\n* **text** Handle response as a string (default)\n* **document** `responseType === 'document'` (browsers)\n* **blob** `responseType === 'blob'` (browsers)\n* **arraybuffer** `responseType === 'arraybuffer'` (browsers)\n* **buffer** Handle response as a buffer (node.js)\n* **array** Handle response as an array of integers (node.js)\n* **uint8array** Handle the response as a `Uint8Array` (node.js)\n* **stream** Respond with the response body stream (node.js)\n\n**Node transport options**\n\n* **type** Handle the response (default: `text`)\n* **unzip** Automatically unzip response bodies (default: `true`)\n* **jar** An instance of a cookie jar (`popsicle.jar()`) (default: `null`)\n* **agent** Custom HTTP pooling agent (default: [infinity-agent](https://github.com/floatdrop/infinity-agent))\n* **maxRedirects** Override the number of redirects allowed (default: `5`)\n* **maxBufferSize** The maximum size of the buffered response body (default: `2000000`)\n* **rejectUnauthorized** Reject invalid SSL certificates (default: `true`)\n* **confirmRedirect** Confirm redirects on `307` and `308` status codes (default: `() => false`)\n* **ca** A string, `Buffer` or array of strings or `Buffers` of trusted certificates in PEM format\n* **key** Private key to use for SSL (default: `null`)\n* **cert** Public x509 certificate to use (default: `null`)\n\n**Browser transport options**\n\n* **type** Handle the XHR response (default: `text`)\n* **withCredentials** Send cookies with CORS requests (default: `false`)\n* **overrideMimeType** Override the XHR response MIME type\n\n#### Short-hand Methods\n\nCommon methods have a short hand exported (created using `defaults({ method })`).\n\n```js\npopsicle.get('http://example.com/api/users')\npopsicle.post('http://example.com/api/users')\npopsicle.put('http://example.com/api/users')\npopsicle.patch('http://example.com/api/users')\npopsicle.del('http://example.com/api/users')\n```\n\n#### Extending with Defaults\n\nCreate a new request function with defaults pre-populated. Handy for a common cookie jar or transport to be used.\n\n```js\nvar cookiePopsicle = popsicle.defaults({\n  transport: popsicle.createTransport({\n    jar: popsicle.jar()\n  })\n})\n```\n\n#### Automatically Stringify Request Body\n\nPopsicle will automatically serialize the request body using the `stringify` plugin. If an object is supplied, it will automatically be stringified as JSON unless the `Content-Type` was set otherwise. If the `Content-Type` is `application/json`, `multipart/form-data` or `application/x-www-form-urlencoded`, it will be automatically serialized accordingly.\n\n```js\npopsicle.get({\n  url: 'http://example.com/api/users',\n  body: {\n    username: 'blakeembrey'\n  },\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n})\n```\n\n#### Multipart Request Bodies\n\nYou can manually create form data by calling `popsicle.form`. When you pass a form data instance as the body, it'll automatically set the correct `Content-Type` - complete with boundary.\n\n```js\nvar form = popsicle.form({\n  username: 'blakeembrey',\n  profileImage: fs.createReadStream('image.png')\n})\n\npopsicle.post({\n  url: '/users',\n  body: form\n})\n```\n\n#### Aborting Requests\n\nAll requests can be aborted before or during execution by calling `Request#abort`.\n\n```js\nvar request = popsicle.get('http://example.com')\n\nsetTimeout(function () {\n  request.abort()\n}, 100)\n\nrequest.catch(function (err) {\n  console.log(err) //=> { message: 'Request aborted', code: 'EABORTED' }\n})\n```\n\n#### Progress\n\nThe request object can be used to check progress at any time.\n\n* **request.uploadedBytes** Current upload size in bytes\n* **request.uploadLength** Total upload size in bytes\n* **request.uploaded** Total uploaded as a percentage\n* **request.downloadedBytes** Current download size in bytes\n* **request.downloadLength** Total download size in bytes\n* **request.downloaded** Total downloaded as a percentage\n* **request.completed** Total uploaded and downloaded as a percentage\n\nAll percentage properties (`request.uploaded`, `request.downloaded`, `request.completed`) are a number between `0` and `1`. Aborting the request will emit a progress event, if the request had started.\n\n```js\nvar request = popsicle.get('http://example.com')\n\nrequest.uploaded //=> 0\nrequest.downloaded //=> 0\n\nrequest.progress(function () {\n  console.log(request) //=> { uploaded: 1, downloaded: 0, completed: 0.5, aborted: false }\n})\n\nrequest.then(function (response) {\n  console.log(request.downloaded) //=> 1\n})\n```\n\n#### Cookie Jar (Node only)\n\nYou can create a reusable cookie jar instance for requests by calling `popsicle.jar`.\n\n```js\nvar jar = popsicle.jar()\n\npopsicle.request({\n  method: 'post',\n  url: '/users',\n  transport: popsicle.createTransport({\n    jar: jar\n  })\n})\n```\n\n### Handling Responses\n\nPromises and node-style callbacks are supported.\n\n#### Promises\n\nPromises are the most expressive interface. Just chain using `Request#then` or `Request#catch` and continue.\n\n```js\npopsicle.get('/users')\n  .then(function (res) {\n    // Success!\n  })\n  .catch(function (err) {\n    // Something broke.\n  })\n```\n\nIf you live on the edge, try with generators ([co](https://www.npmjs.com/package/co)) or ES7 `async`/`await`.\n\n```js\nco(function * () {\n  const users = yield popsicle.get('/users')\n})\n\nasync function () {\n  const users = await popsicle.get('/users')\n}\n```\n\n#### Callbacks\n\nFor tooling that expects node-style callbacks, you can use `Request#exec`. This accepts a single function to call when the response is complete.\n\n```js\npopsicle.get('/users')\n  .exec(function (err, res) {\n    if (err) {\n      // Something broke.\n    }\n\n    // Success!\n  })\n```\n\n### Response Objects\n\nEvery response will give a `Response` object on success. The object provides an intuitive interface for accessing common properties.\n\n* **status** The HTTP response status code\n* **body** An object (if parsed using a plugin), string (if using concat) or stream that is the HTTP response body\n* **headers** An object of lower-cased keys to header values\n* **url** The final response URL (after redirects)\n* **statusType()** Return an integer with the HTTP status type (E.g. `200 -> 2`)\n* **get(key)** Retrieve a HTTP header using a case-insensitive key\n* **name(key)** Retrieve the original HTTP header name using a case-insensitive key\n* **type()** Return the response type (E.g. `application/json`)\n\n### Error Handling\n\nAll response handling methods can return an error. Errors have a `popsicle` property set to the request object and a `code` string. The built-in codes are documented below, but custom errors can be created using `request.error(message, code, cause)`.\n\n* **EABORT** Request has been aborted by user\n* **EUNAVAILABLE** Unable to connect to the remote URL\n* **EINVALID** Request URL is invalid\n* **ETIMEOUT** Request has exceeded the allowed timeout\n* **ESTRINGIFY** Request body threw an error during stringification plugin\n* **EPARSE** Response body threw an error during parse\n* **EMAXREDIRECTS** Maximum number of redirects exceeded (Node only)\n* **EBODY** Unable to handle request body (Node only)\n* **EBLOCKED** The request was blocked (HTTPS -> HTTP) (Browsers only)\n* **ECSP** Request violates the documents Content Security Policy (Browsers only)\n* **ETYPE** Invalid transport type\n\n### Plugins\n\nPlugins can be passed in as an array with the initial options (which overrides default plugins), or they can be used via `Request#use`.\n\n#### External Plugins\n\n* [Server](https://github.com/blakeembrey/popsicle-server) - Automatically mount a server on an available for the request (helpful for testing a la `supertest`)\n* [Status](https://github.com/blakeembrey/popsicle-status) - Reject responses on HTTP failure status codes\n* [No Cache](https://github.com/blakeembrey/popsicle-no-cache) - Prevent caching of HTTP requests in browsers\n* [Basic Auth](https://github.com/blakeembrey/popsicle-basic-auth) - Add a basic authentication header to each request\n* [Prefix](https://github.com/blakeembrey/popsicle-prefix) - Prefix all HTTP requests\n* [Resolve](https://github.com/blakeembrey/popsicle-resolve) - Resolve all HTTP requests against a base URL\n* [Limit](https://github.com/blakeembrey/popsicle-limit) - Transparently handle API rate limits by grouping requests\n* [Group](https://github.com/blakeembrey/popsicle-group) - Group requests and perform operations on them all at once\n* [Proxy Agent](https://github.com/blakeembrey/popsicle-proxy-agent) - Enable HTTP(s) proxying under node (with environment variable support)\n* [Retry](https://github.com/blakeembrey/popsicle-retry) - Retry a HTTP request on network error or server error\n\n#### Helpful Utilities\n\n* [`throat`](https://github.com/ForbesLindesay/throat) - Throttle promise-based functions with concurrency support\n* [`is-browser`](https://github.com/ForbesLindesay/is-browser) - Check if your in a browser environment (E.g. Browserify, Webpack)\n\n#### Creating Plugins\n\nPlugins must be a function that accept config and return a middleware function. For example, here's a basic URL prefix plugin.\n\n```js\nfunction prefix (url) {\n  return function (self, next) {\n    self.url = url + self.url\n    return next()\n  }\n}\n\npopsicle.request('/user')\n  .use(prefix('http://example.com'))\n  .then(function (response) {\n    console.log(response.url) //=> \"http://example.com/user\"\n  })\n```\n\nMiddleware functions accept two arguments - the current request and a function to proceed to the next middleware function (a la Koa `2.x`).\n\n**P.S.** The middleware array is exposed on `request.middleware`, which allows you to clone requests and omit middleware - for example, using `request.middleware.slice(request.middleware.indexOf(currentFn))`. This is useful, as the pre and post steps of previous middleware attach before `currentFn` is executed.\n\n#### Transportation Layers\n\nCreating a custom transportation layer is just a matter creating an object with `open`, `abort` and `use` options set. The open method should set any request information required between called as `request._raw`. Abort must abort the current request instance, while `open` must **always** resolve to a promise. You can set `use` to an empty array if no plugins should be used by default. However, it's recommended you keep `use` set to the defaults, or as close as possible using your transport layer.\n\n## TypeScript\n\nThis project is written using [TypeScript](https://github.com/Microsoft/TypeScript) and [typings](https://github.com/typings/typings). Since version `1.3.1`, you can install the type definition using `typings`.\n\n```\ntypings install npm:popsicle --save\n```\n\n## Development\n\nInstall dependencies and run the test runners (node and Electron using Tape).\n\n```\nnpm install && npm test\n```\n\n## Related Projects\n\n* [Superagent](https://github.com/visionmedia/superagent) - HTTP requests for node and browsers\n* [Fetch](https://github.com/github/fetch) - Browser polyfill for promise-based HTTP requests\n* [Axios](https://github.com/mzabriskie/axios) - HTTP request API based on Angular's $http service\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/popsicle.svg?style=flat\n[npm-url]: https://npmjs.org/package/popsicle\n[downloads-image]: https://img.shields.io/npm/dm/popsicle.svg?style=flat\n[downloads-url]: https://npmjs.org/package/popsicle\n[travis-image]: https://img.shields.io/travis/blakeembrey/popsicle.svg?style=flat\n[travis-url]: https://travis-ci.org/blakeembrey/popsicle\n[coveralls-image]: https://img.shields.io/coveralls/blakeembrey/popsicle.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/blakeembrey/popsicle?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/blakeembrey/popsicle.git"
  },
  "scripts": {
    "build": "rm -rf dist/ && tsc && npm run check-size",
    "check-size": "browserify . -s popsicle --external bluebird > popsicle.js && du -h popsicle.js",
    "lint": "# TODO",
    "prepublish": "typings install && npm run build",
    "test": "npm run lint && npm run build && npm run test-server-open && npm run test-cov && npm run test-browser; EXIT=$?; npm run test-server-close; exit $EXIT",
    "test-browser": "HTTPS_PORT=7358 PORT=7357 browserify -d -t envify dist/test/index.js | tape-run --render tap-spec",
    "test-cov": "HTTPS_PORT=7358 PORT=7357 istanbul cover --print none dist/test/index.js | tap-spec",
    "test-server-close": "if [ -f server.pid ]; then kill -9 $(cat server.pid); rm server.pid; fi; if [ -f https-server.pid ]; then kill -9 $(cat https-server.pid); rm https-server.pid; fi",
    "test-server-open": "PORT=7357 node scripts/server.js & echo $! > server.pid; HTTPS_PORT=7358 node scripts/https-server.js & echo $! > https-server.pid",
    "test-spec": "npm run test-server-open && HTTPS_PORT=7358 PORT=7357 node dist/test/index.js; EXIT=$?; npm run test-server-close; exit $EXIT"
  },
  "version": "8.2.0"
}
